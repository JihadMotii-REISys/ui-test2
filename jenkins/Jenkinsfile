#!groovy
// This script works with native Jenkins pipeline
// Jenkins declarative Pipeline as it is the future: https://stackoverflow.com/questions/44657896/jenkins-pipeline-jenkinsfile-node-and-pipeline-directives
def baseUrl="jmeks2020.reisys.io"
// Define variables for the pipeline usage
def sonarLogin, sonarPassword
def APPLICATION_BUILD_NAME, APP_VERSION, SELENIUM_HUB, APPLICATION_URL_DEV, DOCKER_IMAGE
//def clusterUrl = openshift.cluster();
//echo "Now using cluster with url ${clusterUrl}"
SELENIUM_HUB = "http://selenium-hub.${baseUrl}/wd/hub"
APPLICATION_URL_DEV = "http://demo-ui2.${baseUrl}"
APPLICATION_BUILD_NAME = "ui-test"
APP_VERSION = "latest"
pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: node-build
spec:
  containers:
  # used to run maven processes
  - name: maven
    image: maven:alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /root/.m2
      name: maven-slave-pvc2
      readOnly: false
  # used to run node processes
  - name: node
    image: node:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /root/npmcache
      name: node-slave-pvc2
      readOnly: false
  # used for unit tests
  - name: puppeteer
    image: buildkite/puppeteer:latest
    command:
    - cat
    tty: true
  # used to run docker processes
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  # used to run argocd/git processes
  - name: tools
    image: argoproj/argo-cd-ci-builder:latest
    command:
    - cat
    tty: true
  - name: sonar
    image: sonarsource/sonar-scanner-cli:latest
    command:
    - cat
    tty: true
  - name: trivy
    image: aquasec/trivy:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
  # use host docker
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  # cache node dependencies onto pvc between builds
  - name: node-slave-pvc2
    hostPath:
      path: /root/npmcache
  # cache maven dependencies onto pvc between builds
  - name: maven-slave-pvc2
    hostPath:
      path: /root/.m2
"""
    }
  }

  options {
    // set a timeout of 20 minutes for this pipeline
    timeout(time: 75, unit: 'MINUTES')
  }

  // Pipeline Stages start here
  // Requeres at least one stage
  stages {
    stage('Checkout SCM & Initialize') {
      steps {
        script {
          container('node') {
            checkout scm: scm
            // Turn off Git's SSL cert check, uncomment if needed
            // sh 'git config --global http.sslVerify false'
            println("env.BRANCH_NAME:" + env.BRANCH_NAME)
            println("env.GIT_COMMIT:" + env.GIT_COMMIT.substring(0, 6))
            println("env.CHANGE_ID:" + env.CHANGE_ID)
            // print out all environments
            sh 'printenv'
            sh "npm -v"
            sh "node -v"

            // setup application version and name if this branch requires app on demand
            if (env.BRANCH_NAME.startsWith('feature-')) {
              APP_VERSION = env.BRANCH_NAME.replaceAll('/', '')
            } else if (env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) {
              // get the feature branch name from different variable when this is a PR case and not a commit to the feature branch itself
              APP_VERSION = env.CHANGE_BRANCH.replaceAll('/', '')
            }
          }
        }
      }
    }
    stage('install dependencies') {
      when {
        expression {
          return ((env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) || env.BRANCH_NAME.startsWith('feature-') || env.BRANCH_NAME == 'develop')
        }
      }
      steps {
        container('node'){
          //sh 'ls node_modules'
          sh 'ls /root/npmcache'
          sh 'export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true'
          sh 'npm install --prefer-offline --cache=/root/npmcache'
        }
      }
    }
    //Run Maven unit tests
    stage('Unit Test') {
      when {
        expression {
          return ((env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) || env.BRANCH_NAME.startsWith('feature-') || env.BRANCH_NAME == 'develop')
        }
      }
      steps {
        container('node'){
          container('puppeteer'){
            // Report back to github: Status Check PENDING
            // notifyGithubStatusCheck('PENDING', 'Continuous integration: Run unit test!')

            sh 'CI=true npm run test:headless'
          }
        }
      }
      post {
        always {
          // publish  report
          publishHTML(target: [
            reportDir            : "./reports/coverage",
            reportFiles          : 'index.html',
            reportName           : 'Istanbul Report (Code Coverage)',
            keepAll              : true,
            alwaysLinkToLastBuild: true,
            allowMissing         : false
          ])
        }
      }
    }

    stage('SonarQube Code Analysis') {
      when {
        expression {
          return ((env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) || env.BRANCH_NAME.startsWith('feature-') || env.BRANCH_NAME == 'develop')
        }
      }
      steps {
        // Report back to github: Status Check PENDING
        //notifyGithubStatusCheck('PENDING', 'Continuous integration: Run code analysis!')

        script {
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "sonar", passwordVariable: 'pass', usernameVariable: 'user']]) {
            sonarLogin = '${user}'
            sonarPassword = '${pass}'
            // Run Sonar in this block would result into authorization issue. As the ${user} and ${pass} are encrypted ***** **** instead of plan values
            container('sonar'){
              // Create a new SonarQube analysis and dashboard for this new/updated feature branch / app
              def additionalParams =  (env.BRANCH_NAME.startsWith('feature-')) ? " -Dsonar.projectKey=${APPLICATION_BUILD_NAME}-${APP_VERSION} -Dsonar.projectName=${APPLICATION_BUILD_NAME}-${APP_VERSION} -Dsonar.projectVersion=${env.GIT_COMMIT.substring(0, 6)}" : ""

              // Run Sonar in this block to ensure user/pass are not encrypted
              sh "sonar-scanner -Dsonar.host.url=http://sonarqube-sonarqube:9000 -Dsonar.login=${user} -Dsonar.password=${pass} ${additionalParams}"
            }
          }
        }
      }
    }

    stage('Build and Deploy Image'){
      when {
        expression {
          return (env.BRANCH_NAME.startsWith('feature-') || env.BRANCH_NAME == 'develop')
        }
      }
      environment {
        GIT_CREDS = credentials('git-jm')
      }
      steps{
        container('node'){
          sh 'npm run prod'
          container('docker'){
            script {
              docker.withRegistry('https://docker.'+baseUrl, 'nexus') {
                DOCKER_IMAGE = docker.build("docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${APP_VERSION}-${env.BUILD_NUMBER}", "--network=host .")
                DOCKER_IMAGE.push()

                // Always oush `latest` tag for either PR build or `master` build
                if (env.BRANCH_NAME.startsWith('feature-')) {
                  DOCKER_IMAGE.push("${APP_VERSION}-latest")
                } else if(env.BRANCH_NAME == 'develop') {
                  DOCKER_IMAGE.push("${APP_VERSION}")
                }
              }

              // Multi-branch workflow for Build and Tag Image based based on the env.BRANCH_NAME
              if (env.BRANCH_NAME.startsWith('feature-')) {
                container('tools') {
                  sh "git clone https://$GIT_CREDS_USR:$GIT_CREDS_PSW@github.com/JihadMotii-REISys/ui-test2-deploy.git"
                  sh "git config --global user.email 'ci@ci.com'"

                  dir("ui-test2-deploy") {
                    sh "cd ./feature && kustomize edit set image docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${APP_VERSION}-${env.BUILD_NUMBER}"
                    sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
                  }
                }
              }
            }
          }
        }
      }
    }

    stage('Trivy scan'){
      when {
        expression {
          return ((env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) || env.BRANCH_NAME.startsWith('feature-') || env.BRANCH_NAME == 'develop')
        }
      }
      steps{
        container('trivy'){
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "nexus", passwordVariable: 'pass', usernameVariable: 'user']]) {
            sh "export TRIVY_AUTH_URL=https://docker.${baseUrl}"
            sh "export TRIVY_USERNAME=${user}"
            sh "export TRIVY_PASSWORD=${pass}"
            def imageTag = (env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) ? "${APP_VERSION}-latest" : "${APP_VERSION}-${env.BUILD_NUMBER}"
            sh "trivy image docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${imageTag}"
          }
        }
      }
    }

    stage('Promote from Build to Dev') {
      when {
        expression {
          return env.BRANCH_NAME == 'develop'
        }
      }
      environment {
        GIT_CREDS = credentials('git-jm')
      }
      steps {
        container('tools') {
          sh "git clone https://$GIT_CREDS_USR:$GIT_CREDS_PSW@github.com/JihadMotii-REISys/ui-test2-deploy.git"
          sh "git config --global user.email 'ci@ci.com'"

          dir("ui-test2-deploy") {
            sh "cd ./develop && kustomize edit set image docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${APP_VERSION}-${env.BUILD_NUMBER}"
            sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
          }
        }
      }
    }

    stage('Running Serenity/Selenium Tests') {
      when {
        expression {
          return env.BRANCH_NAME == 'develop'
          // return env.BRANCH_NAME == 'feature-zap' //TODO: remove me
        }
      }
      steps {
        container('tools') {
          script {

            sh "mkdir acceptance-tests"
            sh "chmod 777 acceptance-tests"

            // checkout acceptance tests repo to acceptance-tests dir in the current workspace
            checkout([$class                           : 'GitSCM',
                      branches                         : [[name: '*/master']],
                      doGenerateSubmoduleConfigurations: false,
                      extensions                       : [[
                                                            $class           : 'RelativeTargetDirectory',
                                                            relativeTargetDir: 'acceptance-tests'
                                                          ]],
                      submoduleCfg                     : [],
                      userRemoteConfigs                : [[
                                                            url          : 'https://github.com/diego-ruiz-rei/selenium-ui-test.git',
                                                            credentialsId: 'git'
                                                          ]]
            ])

            container ('maven'){
              // run acceptance tests
              sh "cd acceptance-tests && mvn clean verify serenity:aggregate -Dwebdriver.driver=remote -Dwebdriver.remote.driver=chrome -Dwebdriver.remote.url=${SELENIUM_HUB} -Dwebdriver.base.url=${APPLICATION_URL_DEV} -Dserenity.proxy.http=0.0.0.0 -Dserenity.proxy.http_port=8080"
            }
            // public report
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'acceptance-tests/target/site/serenity/', reportFiles: 'index.html', reportName: 'Integration Test Report', reportTitles: 'COMET Tests'])

            //publish 508 compliance report files
            //zip zipFile: 'AccessibilityReport.zip', archive: true, dir: 'acceptance-tests/target/AccessibilityReport/'
            archiveArtifacts allowEmptyArchive: true, artifacts: 'acceptance-tests/target/AccessibilityReport/*.txt', onlyIfSuccessful: false, fingerprint: true
          }
        }
      }
    }

    stage('Promote from Dev to Stage') {
      when {
        expression {
          return env.BRANCH_NAME == 'develop'
        }
      }
      environment {
        GIT_CREDS = credentials('git-jm')
      }
      steps {
        container('tools') {
          sh "git clone https://$GIT_CREDS_USR:$GIT_CREDS_PSW@github.com/JihadMotii-REISys/ui-test2-deploy.git"
          sh "git config --global user.email 'ci@ci.com'"

          dir("ui-test2-deploy") {
            sh "cd ./staging && kustomize edit set image docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${APP_VERSION}-${env.BUILD_NUMBER}"
            sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
          }
        }
      }
    }

    stage('Promote from Stage to Prod') {
      when {
        expression {
          return env.BRANCH_NAME == 'master'
        }
      }
      environment {
        GIT_CREDS = credentials('git-jm')
      }
      steps {
        container('docker'){
          script {
            docker.withRegistry('https://docker.'+baseUrl, 'nexus') {
              def imageTag = "master-${env.BUILD_NUMBER}"
              // Pull APP_VERSION=`latest` image tagged through `develop` branch pipeline when a PR get's merged into it
              DOCKER_IMAGE = docker.image("docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${APP_VERSION}")
              DOCKER_IMAGE.pull()
              DOCKER_IMAGE.push("${imageTag}")
            }

            container('tools') {
              sh "git clone https://$GIT_CREDS_USR:$GIT_CREDS_PSW@github.com/JihadMotii-REISys/ui-test2-deploy.git"
              sh "git config --global user.email 'ci@ci.com'"

              dir("ui-test2-deploy") {
                sh "cd ./prod && kustomize edit set image docker.${baseUrl}/${APPLICATION_BUILD_NAME}:${imageTag}"
                sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
              }
            }
          }
        }
      }
    }
  }
}

// Report back to github: Status Check to enable or disable the PR for merge
def notifyGithubStatusCheck(String status = 'SUCCESS', String description) {
  if (env.BRANCH_NAME.startsWith('PR-') && env.CHANGE_BRANCH.startsWith('feature-') && env.CHANGE_TARGET.startsWith('develop')) {
    // https://jenkins.io/doc/pipeline/steps/pipeline-githubnotify-step/
    // https://developer.github.com/v3/repos/statuses/
    // Report back to github: Status Check to enable the PR for merge
    githubNotify description: description,  status: status, context: 'continuous-integration/jenkins/pr-head'
  }
}
